% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_osm.R
\name{read_osm}
\alias{read_osm}
\title{Read Open Street Map data}
\usage{
read_osm(x, zoom = NULL, type = "osm", minNumTiles = NULL,
  mergeTiles = NULL, raster, ...)
}
\arguments{
\item{x}{object that can be coerced to a bounding box with \code{\link{bb}} (e.g. an existing bounding box or a shape), or an \code{\link[osmar:osmar]{osmar}} object. In the first case, other arguments can be passed on to \code{\link{bb}} (see \code{...}). If an existing bounding box is specified in projected coordinates, plesae specify \code{current.projection}.}

\item{zoom}{passed on to \code{\link[OpenStreetMap:openmap]{openmap}}. Only applicable when \code{raster=TRUE}.}

\item{type}{tile provider, by default \code{"osm"}, which corresponds to OpenStreetMap Mapnik. See \code{\link[OpenStreetMap:openmap]{openmap}} for options. Only applicable when \code{raster=TRUE}.}

\item{minNumTiles}{passed on to \code{\link[OpenStreetMap:openmap]{openmap}} Only applicable when \code{raster=TRUE}.}

\item{mergeTiles}{passed on to \code{\link[OpenStreetMap:openmap]{openmap}} Only applicable when \code{raster=TRUE}.}

\item{raster}{deprecated}

\item{...}{arguments passed on to \code{\link{bb}}.}
}
\value{
The output of \code{read_osm} is a \code{\link[sp:SpatialGridDataFrame]{SpatialGridDataFrame}} if \code{raster=TRUE}, and otherwise a named list of \code{\link[sp:SpatialPolygonsDataFrame]{SpatialPolygonsDataFrame}}, \code{\link[sp:SpatialLinesDataFrame]{SpatialLinesDataFrame}}, and/or \code{\link[sp:SpatialPointsDataFrame]{SpatialPointsDataFrame}} objects. The names of this list are the names of arguments defined at \code{...}.
}
\description{
Read Open Street Map data. OSM tiles are read and returned as a spatial raster. Vectorized OSM data is not supported anymore (see details).
}
\details{
As of version 2.0, \code{read_osm} cannot be used to read vectorized OSM data anymore. The reason is that the package that was used under the hood, \code{osmar}, has some limitations and is not actively maintained anymore. Therefore, we recommend the package \code{osmdata}. Since this package is very user-friendly, there was no reason to use \code{read_osm} as a wrapper for reading vectorized OSM data.
}
\examples{
\dontrun{
if (require(tmap)) {
    #### Choropleth with OSM background

    # load Netherlands shape
    data(NLD_muni)

    # read OSM raster data
    osm_NLD <- read_osm(NLD_muni, ext=1.1)

    # plot with regular tmap functions
    tm_shape(osm_NLD) +
    	tm_raster() +
    tm_shape(NLD_muni) +
    	tm_polygons("population", convert2density=TRUE, style="kmeans", alpha=.7, palette="Purples")

    #### A close look at the building of Statistics Netherlands in Heerlen

    # create a bounding box around the CBS (Statistics Netherlands) building
    CBS_bb <- bb("CBS Weg 11, Heerlen", width=.003, height=.002)

    # read Microsoft Bing satellite and OpenCycleMap OSM layers
    CBS_osm1 <- read_osm(CBS_bb, type="bing")
    CBS_osm2 <- read_osm(CBS_bb, type="opencyclemap")

    # plot OSM raster data
    qtm(CBS_osm1)
    qtm(CBS_osm2)

    # read vectorized OSM data
    CBS_osm3 <- read_osm(CBS_bb,
        roads=osm_line("highway"),
        parking=osm_poly("amenity=parking"),
        building=osm_poly("building"),
        park=osm_poly("leisure=park"),
        railway_area=osm_poly("landuse=railway"),
        railway=osm_line("railway"),
        forest=osm_poly("landuse=forest"),
        grass=osm_poly("landuse=grass"),
        bicycle=osm_line("highway=cycleway"))

    # plot vectorized OSM data
    tm_shape(CBS_osm3$grass, bbox=CBS_bb) + tm_polygons("darkolivegreen3") +
        tm_shape(CBS_osm3$forest) + tm_fill("forestgreen") +
        tm_shape(CBS_osm3$railway_area) + tm_fill(col="grey70") +
        tm_shape(CBS_osm3$parking) + tm_polygons("gold") +
        tm_shape(CBS_osm3$building) + tm_polygons("grey50") +
        tm_shape(CBS_osm3$roads, bbox=CBS_bb) + tm_lines(col="gold", lwd=3) +
        tm_shape(CBS_osm3$bicycle) + tm_lines(col="blue", lwd=3) +
        tm_shape(CBS_osm3$railway) + tm_lines(col="grey20", lwd=3, lty="dashed") +
        tm_layout(bg.color="grey90")
}
}
}
