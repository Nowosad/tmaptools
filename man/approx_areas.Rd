% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/approx_areas.R
\name{approx_areas}
\alias{approx_areas}
\title{Approximate area sizes of the shapes}
\usage{
approx_areas(shp, unit = "km", coords.unit = NA, unit.size = NA,
  total.area = NA)
}
\arguments{
\item{shp}{shape object, i.e., a \code{\link[sp:SpatialPolygonsDataFrame]{SpatialPolygons(DataFrame)}}}

\item{unit}{one of
\describe{
    \item{\code{"abs"}:}{Absolute numbers based on polygon coordinates.}
    \item{\code{"prop"}:}{Proportional numbers. In other words, the sum of the area sizes equals one.}
    \item{\code{"norm"}:}{Normalized numbers. All area sizes are normalized to the largest area, of which the area size equals one.}
    \item{other:}{Predefined For instance, "km", "m", "miles", or "us-ft". These units are the output units. See \code{coords.unit} for the units that are used by which the coordinates are defined. For this method, \code{total.area} or \code{unit.size} is required. In this case, the area sizes are returned in squared units, e.g., in squared kilometers.}}
    The default method is \code{"km"}.}

\item{coords.unit}{unit by which the coordinates are defined. Only applicable for projected shapes. By default, the value is taken from the crs projection string.}

\item{unit.size}{size of the target unit (specified by \code{unit}) in terms of the coordinate units (specified by \code{coords.unit}). For instance, if \code{unit="km"} and \code{coords.unit="m"}, then \code{unit.size} shoudl be 1000. Only needs to be specified if units are used other than "km", "m", "miles", or "us-ft".}

\item{total.area}{total area size of \code{shp} in number of target units (defined by \code{unit}). Useful if the total area of the \code{shp} differs from a reference total area value.}
}
\value{
Numeric vector of area sizes.
}
\description{
Approximate the area sizes of the polygons either in 1) absolute numbers based on the polygon coordinates, 2) proportional numbers, 3) normalized numbers and 4) squared units (e.g. kilometers).
}
\details{
Note that this method is an approximation, since it depends on the used projection and the level of detail of the SpatialPolygons object. Projections with equal-area property are highly recommended.

For projected shapes, \code{\link[rgeos:gArea]{gArea}} is used, and for unprojected shapes, \code{\link[geosphere:areaPolygon]{areaPolygon}}.
}
\examples{
if (require(tmap) && require(dplyr)) {
data(NLD_muni)

NLD_muni$area <- approx_areas(NLD_muni, total.area = 33893)

tm_shape(NLD_muni) +
	tm_bubbles(size="area", title.size=expression("Area in " * km^2))


# function that returns min, max, mean and sum of area values
summary_areas <- function(x) {
    list(min_area=min(x),
         max_area=max(x),
         mean_area=mean(x),
         sum_area=sum(x))
}

# area of the polygons
approx_areas(NLD_muni) \%>\% summary_areas()

# area of the polygons, adjusted corrected for a specified total area size
approx_areas(NLD_muni, total.area=33893) \%>\% summary_areas()

# proportional area of the polygons
approx_areas(NLD_muni, unit = "prop") \%>\% summary_areas()

# area in squared miles
approx_areas(NLD_muni, unit = "miles") \%>\% summary_areas()

# area of the polygons when unprojected
approx_areas(NLD_muni \%>\% set_projection(projection="longlat")) \%>\% summary_areas()
}
}

